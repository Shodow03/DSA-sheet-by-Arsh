// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class Driverclass
{
    public static void main (String[] args) 
    {
        Scanner sc= new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            while(n-- > 1){
		        tail.next = new Node(sc.nextInt());
		        tail = tail.next;
		    }
		   
		      head = new Solution().segregate(head);
		     printList(head);
		    System.out.println();
        }
    }
    
    public static void printList(Node head)
    {
        if(head == null)
           return;
           
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }
    
    
}



// } Driver Code Ends


//User function Template for Java

/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}
*/
class Solution
{
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head)
    {
        // add your code here
        HashMap<Integer, Integer> map=new HashMap<Integer, Integer>();
		Node tail=head;
		while(tail!=null) {
			if(map.containsKey(tail.data)) {
				map.put(tail.data, map.get(tail.data)+1);
			}else {
				map.put(tail.data,1);
			}
			tail=tail.next;
		}
		int numZero=0,numOne=0,numTwo=0;
		
		if(map.containsKey(0)){
		    numZero=map.get(0);
		}
		if(map.containsKey(1)){
		    numOne=map.get(1);
		}
		if(map.containsKey(2)){
		    numTwo=map.get(2);
		}
	
		tail=head;
		
		while(tail!=null) {
			if(numZero!=0) {
				tail.data=0;
				numZero--;
			}else if(numZero==0&& numOne!=0) {
				tail.data=1;
				numOne--;
			}else {
				tail.data=2;
				numTwo--;
			}
			
			tail=tail.next;
		}
		return head;
    }
}


