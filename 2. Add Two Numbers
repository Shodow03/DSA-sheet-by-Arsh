/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode tail1=l1;
		ListNode tail2=l2;
		int carry=0;
		int sum=0;
		ListNode head=null;
		ListNode tail=head;

		while(tail1!=null && tail2!=null) {
			sum=tail1.val+tail2.val+carry;
			carry=0;
			if(sum>9) {
				carry=sum/10;
				sum=sum%10;
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}else {
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}
			tail1=tail1.next;
			tail2=tail2.next;

		}
		
		while(tail1!=null) {
			sum=tail1.val+carry;
			carry=0;
			if(sum>9) {
				carry=sum/10;
				sum=sum%10;
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}else {
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}
			tail1=tail1.next;
		}
		
		while(tail2!=null) {
			sum=tail2.val+carry;
			carry=0;
			if(sum>9) {
				carry=sum/10;
				sum=sum%10;
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}else {
				ListNode node=new ListNode(sum);
				if(head==null) {
					head=node;
					tail=node;
				}else {
					tail.next=node;
					tail=node;
				}
			}
			tail2=tail2.next;
		}
		
		if(carry>0) {
			ListNode node=new ListNode(carry);
			tail.next=node;
			tail=node;
		}
		
		

		return head;
    }
}
